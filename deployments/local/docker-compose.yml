services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: DRAGON
      POSTGRES_PASSWORD: DRAGON
      POSTGRES_DB: PAYMENT_GATEWAY
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U DRAGON -d PAYMENT_GATEWAY"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    container_name: redis
    command: ["redis-server", "--requirepass", "dragon_knight"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app_network


  node-exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter
    pid: "host"
    networks:
      - app_network
    volumes:
      - "/:/host:ro,rslave"
    command:
      - '--path.rootfs=/host'

  migrate:
    image: migrate:1.0
    container_name: migrate
    volumes:
      - ./docker.env:/app/docker.env
      - ../../pkg/database/migrations:/app/pkg/database/migrations
    env_file: ./docker.env
    environment:
      APP_ENV: docker
      DB_URL: postgres://DRAGON:DRAGON@postgres/PAYMENT_GATEWAY
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: my-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: my-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-01
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app_network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth:
    image: auth-service:1.0
    container_name: auth
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant:
    image: merchant-service:1.0
    container_name: merchant
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  card:
    image: card-service:1.0
    container_name: card
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  saldo:
    image: saldo-service:1.0
    container_name: saldo
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  role:
    image: role-service:1.0
    container_name: role
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  topup:
    image: topup-service:1.0
    container_name: topup
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  transaction:
    image: transaction-service:1.0
    container_name: transaction
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  transfer:
    image: transfer-service:1.0
    container_name: transfer
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  user:
    image: user-service:1.0
    container_name: user
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092
      - REDIS_PASSWORD=dragon_knight

  email:
    image: email-service:1.0
    container_name: email
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  withdraw:
    image: withdraw-service:1.0
    container_name: withdraw
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  apigateway:
    image: apigateway:1.0
    container_name: apigateway
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
    ports:
      - "5000:5000"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth:
        condition: service_started
      card:
        condition: service_started
      merchant:
        condition: service_started
      user:
        condition: service_started
      role:
        condition: service_started
      saldo:
        condition: service_started
      topup:
        condition: service_started
      transaction:
        condition: service_started
      transfer:
        condition: service_started
      withdraw:
        condition: service_started
    environment:
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../observability/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app_network
    depends_on:
      - otel-collector
    restart: unless-stopped


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app_network
    depends_on:
      - prometheus
      - jaeger


  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apigateway
    networks:
      - app_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../../observability/otel-collector.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"     
      - "4318:4318"      
      - "13133:13133"
      - "8889:8889"
    depends_on:
      - jaeger
    networks:
      - app_network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    container_name: jaeger
    ports:
      - "16686:16686"       
      - "14250:14250"        
    networks:
      - app_network
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.9.0
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    networks:
      - app_network
    depends_on:
      kafka:
        condition: service_healthy
    command: 
      - "--kafka.server=my-kafka:9092"
      - "--web.listen-address=0.0.0.0:9308"
      - "--log.level=debug"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9308/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  kafka_data:
  redis_data:

networks:
  app_network:
    driver: bridge