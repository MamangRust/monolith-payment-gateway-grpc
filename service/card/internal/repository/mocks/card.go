// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/card.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	record "github.com/MamangRust/monolith-payment-gateway-shared/domain/record"
	requests "github.com/MamangRust/monolith-payment-gateway-shared/domain/requests"
	gomock "go.uber.org/mock/gomock"
)

// MockCardCommandRepository is a mock of CardCommandRepository interface.
type MockCardCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardCommandRepositoryMockRecorder
	isgomock struct{}
}

// MockCardCommandRepositoryMockRecorder is the mock recorder for MockCardCommandRepository.
type MockCardCommandRepositoryMockRecorder struct {
	mock *MockCardCommandRepository
}

// NewMockCardCommandRepository creates a new mock instance.
func NewMockCardCommandRepository(ctrl *gomock.Controller) *MockCardCommandRepository {
	mock := &MockCardCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCardCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardCommandRepository) EXPECT() *MockCardCommandRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardCommandRepository) CreateCard(request *requests.CreateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardCommandRepositoryMockRecorder) CreateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardCommandRepository)(nil).CreateCard), request)
}

// DeleteAllCardPermanent mocks base method.
func (m *MockCardCommandRepository) DeleteAllCardPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCardPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCardPermanent indicates an expected call of DeleteAllCardPermanent.
func (mr *MockCardCommandRepositoryMockRecorder) DeleteAllCardPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCardPermanent", reflect.TypeOf((*MockCardCommandRepository)(nil).DeleteAllCardPermanent))
}

// DeleteCardPermanent mocks base method.
func (m *MockCardCommandRepository) DeleteCardPermanent(card_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardPermanent", card_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardCommandRepositoryMockRecorder) DeleteCardPermanent(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardCommandRepository)(nil).DeleteCardPermanent), card_id)
}

// RestoreAllCard mocks base method.
func (m *MockCardCommandRepository) RestoreAllCard() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllCard")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllCard indicates an expected call of RestoreAllCard.
func (mr *MockCardCommandRepositoryMockRecorder) RestoreAllCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllCard", reflect.TypeOf((*MockCardCommandRepository)(nil).RestoreAllCard))
}

// RestoreCard mocks base method.
func (m *MockCardCommandRepository) RestoreCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardCommandRepositoryMockRecorder) RestoreCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardCommandRepository)(nil).RestoreCard), cardId)
}

// TrashedCard mocks base method.
func (m *MockCardCommandRepository) TrashedCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardCommandRepositoryMockRecorder) TrashedCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardCommandRepository)(nil).TrashedCard), cardId)
}

// UpdateCard mocks base method.
func (m *MockCardCommandRepository) UpdateCard(request *requests.UpdateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardCommandRepositoryMockRecorder) UpdateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardCommandRepository)(nil).UpdateCard), request)
}

// MockCardQueryRepository is a mock of CardQueryRepository interface.
type MockCardQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardQueryRepositoryMockRecorder
	isgomock struct{}
}

// MockCardQueryRepositoryMockRecorder is the mock recorder for MockCardQueryRepository.
type MockCardQueryRepositoryMockRecorder struct {
	mock *MockCardQueryRepository
}

// NewMockCardQueryRepository creates a new mock instance.
func NewMockCardQueryRepository(ctrl *gomock.Controller) *MockCardQueryRepository {
	mock := &MockCardQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCardQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardQueryRepository) EXPECT() *MockCardQueryRepositoryMockRecorder {
	return m.recorder
}

// FindAllCards mocks base method.
func (m *MockCardQueryRepository) FindAllCards(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCards", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllCards indicates an expected call of FindAllCards.
func (mr *MockCardQueryRepositoryMockRecorder) FindAllCards(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCards", reflect.TypeOf((*MockCardQueryRepository)(nil).FindAllCards), req)
}

// FindByActive mocks base method.
func (m *MockCardQueryRepository) FindByActive(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockCardQueryRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockCardQueryRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockCardQueryRepository) FindById(card_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", card_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCardQueryRepositoryMockRecorder) FindById(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCardQueryRepository)(nil).FindById), card_id)
}

// FindByTrashed mocks base method.
func (m *MockCardQueryRepository) FindByTrashed(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockCardQueryRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockCardQueryRepository)(nil).FindByTrashed), req)
}

// FindCardByCardNumber mocks base method.
func (m *MockCardQueryRepository) FindCardByCardNumber(card_number string) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByCardNumber", card_number)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByCardNumber indicates an expected call of FindCardByCardNumber.
func (mr *MockCardQueryRepositoryMockRecorder) FindCardByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByCardNumber", reflect.TypeOf((*MockCardQueryRepository)(nil).FindCardByCardNumber), card_number)
}

// FindCardByUserId mocks base method.
func (m *MockCardQueryRepository) FindCardByUserId(user_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByUserId", user_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByUserId indicates an expected call of FindCardByUserId.
func (mr *MockCardQueryRepositoryMockRecorder) FindCardByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByUserId", reflect.TypeOf((*MockCardQueryRepository)(nil).FindCardByUserId), user_id)
}

// MockCardDashboardRepository is a mock of CardDashboardRepository interface.
type MockCardDashboardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardDashboardRepositoryMockRecorder
	isgomock struct{}
}

// MockCardDashboardRepositoryMockRecorder is the mock recorder for MockCardDashboardRepository.
type MockCardDashboardRepositoryMockRecorder struct {
	mock *MockCardDashboardRepository
}

// NewMockCardDashboardRepository creates a new mock instance.
func NewMockCardDashboardRepository(ctrl *gomock.Controller) *MockCardDashboardRepository {
	mock := &MockCardDashboardRepository{ctrl: ctrl}
	mock.recorder = &MockCardDashboardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardDashboardRepository) EXPECT() *MockCardDashboardRepositoryMockRecorder {
	return m.recorder
}

// GetTotalBalanceByCardNumber mocks base method.
func (m *MockCardDashboardRepository) GetTotalBalanceByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalanceByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalanceByCardNumber indicates an expected call of GetTotalBalanceByCardNumber.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalBalanceByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalanceByCardNumber", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalBalanceByCardNumber), cardNumber)
}

// GetTotalBalances mocks base method.
func (m *MockCardDashboardRepository) GetTotalBalances() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalances")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalances indicates an expected call of GetTotalBalances.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalBalances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalances", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalBalances))
}

// GetTotalTopAmount mocks base method.
func (m *MockCardDashboardRepository) GetTotalTopAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTopAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTopAmount indicates an expected call of GetTotalTopAmount.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTopAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTopAmount", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTopAmount))
}

// GetTotalTopupAmountByCardNumber mocks base method.
func (m *MockCardDashboardRepository) GetTotalTopupAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTopupAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTopupAmountByCardNumber indicates an expected call of GetTotalTopupAmountByCardNumber.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTopupAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTopupAmountByCardNumber", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTopupAmountByCardNumber), cardNumber)
}

// GetTotalTransactionAmount mocks base method.
func (m *MockCardDashboardRepository) GetTotalTransactionAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransactionAmount indicates an expected call of GetTotalTransactionAmount.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTransactionAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionAmount", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTransactionAmount))
}

// GetTotalTransactionAmountByCardNumber mocks base method.
func (m *MockCardDashboardRepository) GetTotalTransactionAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransactionAmountByCardNumber indicates an expected call of GetTotalTransactionAmountByCardNumber.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTransactionAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionAmountByCardNumber", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTransactionAmountByCardNumber), cardNumber)
}

// GetTotalTransferAmount mocks base method.
func (m *MockCardDashboardRepository) GetTotalTransferAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmount indicates an expected call of GetTotalTransferAmount.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTransferAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmount", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTransferAmount))
}

// GetTotalTransferAmountByReceiver mocks base method.
func (m *MockCardDashboardRepository) GetTotalTransferAmountByReceiver(receiverCardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmountByReceiver", receiverCardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmountByReceiver indicates an expected call of GetTotalTransferAmountByReceiver.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTransferAmountByReceiver(receiverCardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmountByReceiver", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTransferAmountByReceiver), receiverCardNumber)
}

// GetTotalTransferAmountBySender mocks base method.
func (m *MockCardDashboardRepository) GetTotalTransferAmountBySender(senderCardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmountBySender", senderCardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmountBySender indicates an expected call of GetTotalTransferAmountBySender.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalTransferAmountBySender(senderCardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmountBySender", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalTransferAmountBySender), senderCardNumber)
}

// GetTotalWithdrawAmount mocks base method.
func (m *MockCardDashboardRepository) GetTotalWithdrawAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithdrawAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithdrawAmount indicates an expected call of GetTotalWithdrawAmount.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalWithdrawAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithdrawAmount", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalWithdrawAmount))
}

// GetTotalWithdrawAmountByCardNumber mocks base method.
func (m *MockCardDashboardRepository) GetTotalWithdrawAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithdrawAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithdrawAmountByCardNumber indicates an expected call of GetTotalWithdrawAmountByCardNumber.
func (mr *MockCardDashboardRepositoryMockRecorder) GetTotalWithdrawAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardDashboardRepository)(nil).GetTotalWithdrawAmountByCardNumber), cardNumber)
}

// MockCardStatisticRepository is a mock of CardStatisticRepository interface.
type MockCardStatisticRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardStatisticRepositoryMockRecorder
	isgomock struct{}
}

// MockCardStatisticRepositoryMockRecorder is the mock recorder for MockCardStatisticRepository.
type MockCardStatisticRepositoryMockRecorder struct {
	mock *MockCardStatisticRepository
}

// NewMockCardStatisticRepository creates a new mock instance.
func NewMockCardStatisticRepository(ctrl *gomock.Controller) *MockCardStatisticRepository {
	mock := &MockCardStatisticRepository{ctrl: ctrl}
	mock.recorder = &MockCardStatisticRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardStatisticRepository) EXPECT() *MockCardStatisticRepositoryMockRecorder {
	return m.recorder
}

// GetMonthlyBalance mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyBalance(year int) ([]*record.CardMonthBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyBalance", year)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyBalance indicates an expected call of GetMonthlyBalance.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyBalance", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyBalance), year)
}

// GetMonthlyTopupAmount mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyTopupAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmount indicates an expected call of GetMonthlyTopupAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyTopupAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyTopupAmount), year)
}

// GetMonthlyTransactionAmount mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyTransactionAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransactionAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransactionAmount indicates an expected call of GetMonthlyTransactionAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyTransactionAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransactionAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyTransactionAmount), year)
}

// GetMonthlyTransferAmountReceiver mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyTransferAmountReceiver(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountReceiver", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountReceiver indicates an expected call of GetMonthlyTransferAmountReceiver.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyTransferAmountReceiver(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountReceiver", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyTransferAmountReceiver), year)
}

// GetMonthlyTransferAmountSender mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyTransferAmountSender(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountSender", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountSender indicates an expected call of GetMonthlyTransferAmountSender.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyTransferAmountSender(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountSender", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyTransferAmountSender), year)
}

// GetMonthlyWithdrawAmount mocks base method.
func (m *MockCardStatisticRepository) GetMonthlyWithdrawAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdrawAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdrawAmount indicates an expected call of GetMonthlyWithdrawAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetMonthlyWithdrawAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdrawAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetMonthlyWithdrawAmount), year)
}

// GetYearlyBalance mocks base method.
func (m *MockCardStatisticRepository) GetYearlyBalance(year int) ([]*record.CardYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyBalance", year)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyBalance indicates an expected call of GetYearlyBalance.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyBalance", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyBalance), year)
}

// GetYearlyTopupAmount mocks base method.
func (m *MockCardStatisticRepository) GetYearlyTopupAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmount indicates an expected call of GetYearlyTopupAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyTopupAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyTopupAmount), year)
}

// GetYearlyTransactionAmount mocks base method.
func (m *MockCardStatisticRepository) GetYearlyTransactionAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionAmount indicates an expected call of GetYearlyTransactionAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyTransactionAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyTransactionAmount), year)
}

// GetYearlyTransferAmountReceiver mocks base method.
func (m *MockCardStatisticRepository) GetYearlyTransferAmountReceiver(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountReceiver", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountReceiver indicates an expected call of GetYearlyTransferAmountReceiver.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyTransferAmountReceiver(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountReceiver", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyTransferAmountReceiver), year)
}

// GetYearlyTransferAmountSender mocks base method.
func (m *MockCardStatisticRepository) GetYearlyTransferAmountSender(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountSender", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountSender indicates an expected call of GetYearlyTransferAmountSender.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyTransferAmountSender(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountSender", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyTransferAmountSender), year)
}

// GetYearlyWithdrawAmount mocks base method.
func (m *MockCardStatisticRepository) GetYearlyWithdrawAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawAmount indicates an expected call of GetYearlyWithdrawAmount.
func (mr *MockCardStatisticRepositoryMockRecorder) GetYearlyWithdrawAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawAmount", reflect.TypeOf((*MockCardStatisticRepository)(nil).GetYearlyWithdrawAmount), year)
}

// MockCardStatisticByCardRepository is a mock of CardStatisticByCardRepository interface.
type MockCardStatisticByCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardStatisticByCardRepositoryMockRecorder
	isgomock struct{}
}

// MockCardStatisticByCardRepositoryMockRecorder is the mock recorder for MockCardStatisticByCardRepository.
type MockCardStatisticByCardRepositoryMockRecorder struct {
	mock *MockCardStatisticByCardRepository
}

// NewMockCardStatisticByCardRepository creates a new mock instance.
func NewMockCardStatisticByCardRepository(ctrl *gomock.Controller) *MockCardStatisticByCardRepository {
	mock := &MockCardStatisticByCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardStatisticByCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardStatisticByCardRepository) EXPECT() *MockCardStatisticByCardRepositoryMockRecorder {
	return m.recorder
}

// GetMonthlyBalancesByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyBalancesByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyBalancesByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyBalancesByCardNumber indicates an expected call of GetMonthlyBalancesByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyBalancesByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyBalancesByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyBalancesByCardNumber), req)
}

// GetMonthlyTopupAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyTopupAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmountByCardNumber indicates an expected call of GetMonthlyTopupAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyTopupAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyTopupAmountByCardNumber), req)
}

// GetMonthlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyTransactionAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransactionAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransactionAmountByCardNumber indicates an expected call of GetMonthlyTransactionAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyTransactionAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyTransactionAmountByCardNumber), req)
}

// GetMonthlyTransferAmountByReceiver mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyTransferAmountByReceiver(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountByReceiver", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountByReceiver indicates an expected call of GetMonthlyTransferAmountByReceiver.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyTransferAmountByReceiver(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountByReceiver", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyTransferAmountByReceiver), req)
}

// GetMonthlyTransferAmountBySender mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyTransferAmountBySender(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountBySender", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountBySender indicates an expected call of GetMonthlyTransferAmountBySender.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyTransferAmountBySender(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountBySender", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyTransferAmountBySender), req)
}

// GetMonthlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetMonthlyWithdrawAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdrawAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdrawAmountByCardNumber indicates an expected call of GetMonthlyWithdrawAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetMonthlyWithdrawAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetMonthlyWithdrawAmountByCardNumber), req)
}

// GetYearlyBalanceByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyBalanceByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyBalanceByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyBalanceByCardNumber indicates an expected call of GetYearlyBalanceByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyBalanceByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyBalanceByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyBalanceByCardNumber), req)
}

// GetYearlyTopupAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyTopupAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmountByCardNumber indicates an expected call of GetYearlyTopupAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyTopupAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyTopupAmountByCardNumber), req)
}

// GetYearlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyTransactionAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionAmountByCardNumber indicates an expected call of GetYearlyTransactionAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyTransactionAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyTransactionAmountByCardNumber), req)
}

// GetYearlyTransferAmountByReceiver mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyTransferAmountByReceiver(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountByReceiver", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountByReceiver indicates an expected call of GetYearlyTransferAmountByReceiver.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyTransferAmountByReceiver(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountByReceiver", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyTransferAmountByReceiver), req)
}

// GetYearlyTransferAmountBySender mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyTransferAmountBySender(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountBySender", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountBySender indicates an expected call of GetYearlyTransferAmountBySender.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyTransferAmountBySender(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountBySender", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyTransferAmountBySender), req)
}

// GetYearlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardStatisticByCardRepository) GetYearlyWithdrawAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawAmountByCardNumber indicates an expected call of GetYearlyWithdrawAmountByCardNumber.
func (mr *MockCardStatisticByCardRepositoryMockRecorder) GetYearlyWithdrawAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardStatisticByCardRepository)(nil).GetYearlyWithdrawAmountByCardNumber), req)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), user_id)
}
