// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/cache.go
//

// Package mock_errorhandler is a generated GoMock package.
package mock_errorhandler

import (
	reflect "reflect"

	response "github.com/MamangRust/monolith-payment-gateway-shared/domain/response"
	trace "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockIdentityErrorHandler is a mock of IdentityErrorHandler interface.
type MockIdentityErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityErrorHandlerMockRecorder
	isgomock struct{}
}

// MockIdentityErrorHandlerMockRecorder is the mock recorder for MockIdentityErrorHandler.
type MockIdentityErrorHandlerMockRecorder struct {
	mock *MockIdentityErrorHandler
}

// NewMockIdentityErrorHandler creates a new mock instance.
func NewMockIdentityErrorHandler(ctrl *gomock.Controller) *MockIdentityErrorHandler {
	mock := &MockIdentityErrorHandler{ctrl: ctrl}
	mock.recorder = &MockIdentityErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityErrorHandler) EXPECT() *MockIdentityErrorHandlerMockRecorder {
	return m.recorder
}

// HandleDeleteRefreshTokenError mocks base method.
func (m *MockIdentityErrorHandler) HandleDeleteRefreshTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleDeleteRefreshTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleDeleteRefreshTokenError indicates an expected call of HandleDeleteRefreshTokenError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleDeleteRefreshTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteRefreshTokenError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleDeleteRefreshTokenError), varargs...)
}

// HandleExpiredRefreshTokenError mocks base method.
func (m *MockIdentityErrorHandler) HandleExpiredRefreshTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleExpiredRefreshTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleExpiredRefreshTokenError indicates an expected call of HandleExpiredRefreshTokenError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleExpiredRefreshTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleExpiredRefreshTokenError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleExpiredRefreshTokenError), varargs...)
}

// HandleFindByIdError mocks base method.
func (m *MockIdentityErrorHandler) HandleFindByIdError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindByIdError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindByIdError indicates an expected call of HandleFindByIdError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleFindByIdError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindByIdError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleFindByIdError), varargs...)
}

// HandleGetMeError mocks base method.
func (m *MockIdentityErrorHandler) HandleGetMeError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleGetMeError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleGetMeError indicates an expected call of HandleGetMeError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleGetMeError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetMeError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleGetMeError), varargs...)
}

// HandleInvalidTokenError mocks base method.
func (m *MockIdentityErrorHandler) HandleInvalidTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleInvalidTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleInvalidTokenError indicates an expected call of HandleInvalidTokenError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleInvalidTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleInvalidTokenError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleInvalidTokenError), varargs...)
}

// HandleUpdateRefreshTokenError mocks base method.
func (m *MockIdentityErrorHandler) HandleUpdateRefreshTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleUpdateRefreshTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleUpdateRefreshTokenError indicates an expected call of HandleUpdateRefreshTokenError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleUpdateRefreshTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateRefreshTokenError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleUpdateRefreshTokenError), varargs...)
}

// HandleValidateTokenError mocks base method.
func (m *MockIdentityErrorHandler) HandleValidateTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleValidateTokenError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleValidateTokenError indicates an expected call of HandleValidateTokenError.
func (mr *MockIdentityErrorHandlerMockRecorder) HandleValidateTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleValidateTokenError", reflect.TypeOf((*MockIdentityErrorHandler)(nil).HandleValidateTokenError), varargs...)
}

// MockKafkaErrorHandler is a mock of KafkaErrorHandler interface.
type MockKafkaErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaErrorHandlerMockRecorder
	isgomock struct{}
}

// MockKafkaErrorHandlerMockRecorder is the mock recorder for MockKafkaErrorHandler.
type MockKafkaErrorHandlerMockRecorder struct {
	mock *MockKafkaErrorHandler
}

// NewMockKafkaErrorHandler creates a new mock instance.
func NewMockKafkaErrorHandler(ctrl *gomock.Controller) *MockKafkaErrorHandler {
	mock := &MockKafkaErrorHandler{ctrl: ctrl}
	mock.recorder = &MockKafkaErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaErrorHandler) EXPECT() *MockKafkaErrorHandlerMockRecorder {
	return m.recorder
}

// HandleSendEmailForgotPassword mocks base method.
func (m *MockKafkaErrorHandler) HandleSendEmailForgotPassword(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleSendEmailForgotPassword", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleSendEmailForgotPassword indicates an expected call of HandleSendEmailForgotPassword.
func (mr *MockKafkaErrorHandlerMockRecorder) HandleSendEmailForgotPassword(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendEmailForgotPassword", reflect.TypeOf((*MockKafkaErrorHandler)(nil).HandleSendEmailForgotPassword), varargs...)
}

// HandleSendEmailRegister mocks base method.
func (m *MockKafkaErrorHandler) HandleSendEmailRegister(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleSendEmailRegister", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleSendEmailRegister indicates an expected call of HandleSendEmailRegister.
func (mr *MockKafkaErrorHandlerMockRecorder) HandleSendEmailRegister(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendEmailRegister", reflect.TypeOf((*MockKafkaErrorHandler)(nil).HandleSendEmailRegister), varargs...)
}

// HandleSendEmailVerifyCode mocks base method.
func (m *MockKafkaErrorHandler) HandleSendEmailVerifyCode(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleSendEmailVerifyCode", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleSendEmailVerifyCode indicates an expected call of HandleSendEmailVerifyCode.
func (mr *MockKafkaErrorHandlerMockRecorder) HandleSendEmailVerifyCode(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendEmailVerifyCode", reflect.TypeOf((*MockKafkaErrorHandler)(nil).HandleSendEmailVerifyCode), varargs...)
}

// MockLoginErrorHandler is a mock of LoginErrorHandler interface.
type MockLoginErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLoginErrorHandlerMockRecorder
	isgomock struct{}
}

// MockLoginErrorHandlerMockRecorder is the mock recorder for MockLoginErrorHandler.
type MockLoginErrorHandlerMockRecorder struct {
	mock *MockLoginErrorHandler
}

// NewMockLoginErrorHandler creates a new mock instance.
func NewMockLoginErrorHandler(ctrl *gomock.Controller) *MockLoginErrorHandler {
	mock := &MockLoginErrorHandler{ctrl: ctrl}
	mock.recorder = &MockLoginErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginErrorHandler) EXPECT() *MockLoginErrorHandlerMockRecorder {
	return m.recorder
}

// HandleFindEmailError mocks base method.
func (m *MockLoginErrorHandler) HandleFindEmailError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindEmailError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindEmailError indicates an expected call of HandleFindEmailError.
func (mr *MockLoginErrorHandlerMockRecorder) HandleFindEmailError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindEmailError", reflect.TypeOf((*MockLoginErrorHandler)(nil).HandleFindEmailError), varargs...)
}

// MockMarshalErrorHandler is a mock of MarshalErrorHandler interface.
type MockMarshalErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMarshalErrorHandlerMockRecorder
	isgomock struct{}
}

// MockMarshalErrorHandlerMockRecorder is the mock recorder for MockMarshalErrorHandler.
type MockMarshalErrorHandlerMockRecorder struct {
	mock *MockMarshalErrorHandler
}

// NewMockMarshalErrorHandler creates a new mock instance.
func NewMockMarshalErrorHandler(ctrl *gomock.Controller) *MockMarshalErrorHandler {
	mock := &MockMarshalErrorHandler{ctrl: ctrl}
	mock.recorder = &MockMarshalErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarshalErrorHandler) EXPECT() *MockMarshalErrorHandlerMockRecorder {
	return m.recorder
}

// HandleMarsalForgotPassword mocks base method.
func (m *MockMarshalErrorHandler) HandleMarsalForgotPassword(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleMarsalForgotPassword", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleMarsalForgotPassword indicates an expected call of HandleMarsalForgotPassword.
func (mr *MockMarshalErrorHandlerMockRecorder) HandleMarsalForgotPassword(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMarsalForgotPassword", reflect.TypeOf((*MockMarshalErrorHandler)(nil).HandleMarsalForgotPassword), varargs...)
}

// HandleMarshalRegisterError mocks base method.
func (m *MockMarshalErrorHandler) HandleMarshalRegisterError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleMarshalRegisterError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleMarshalRegisterError indicates an expected call of HandleMarshalRegisterError.
func (mr *MockMarshalErrorHandlerMockRecorder) HandleMarshalRegisterError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMarshalRegisterError", reflect.TypeOf((*MockMarshalErrorHandler)(nil).HandleMarshalRegisterError), varargs...)
}

// HandleMarshalVerifyCode mocks base method.
func (m *MockMarshalErrorHandler) HandleMarshalVerifyCode(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleMarshalVerifyCode", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleMarshalVerifyCode indicates an expected call of HandleMarshalVerifyCode.
func (mr *MockMarshalErrorHandlerMockRecorder) HandleMarshalVerifyCode(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMarshalVerifyCode", reflect.TypeOf((*MockMarshalErrorHandler)(nil).HandleMarshalVerifyCode), varargs...)
}

// MockPasswordErrorHandler is a mock of PasswordErrorHandler interface.
type MockPasswordErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordErrorHandlerMockRecorder
	isgomock struct{}
}

// MockPasswordErrorHandlerMockRecorder is the mock recorder for MockPasswordErrorHandler.
type MockPasswordErrorHandlerMockRecorder struct {
	mock *MockPasswordErrorHandler
}

// NewMockPasswordErrorHandler creates a new mock instance.
func NewMockPasswordErrorHandler(ctrl *gomock.Controller) *MockPasswordErrorHandler {
	mock := &MockPasswordErrorHandler{ctrl: ctrl}
	mock.recorder = &MockPasswordErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordErrorHandler) EXPECT() *MockPasswordErrorHandlerMockRecorder {
	return m.recorder
}

// HandleComparePasswordError mocks base method.
func (m *MockPasswordErrorHandler) HandleComparePasswordError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleComparePasswordError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleComparePasswordError indicates an expected call of HandleComparePasswordError.
func (mr *MockPasswordErrorHandlerMockRecorder) HandleComparePasswordError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleComparePasswordError", reflect.TypeOf((*MockPasswordErrorHandler)(nil).HandleComparePasswordError), varargs...)
}

// HandleHashPasswordError mocks base method.
func (m *MockPasswordErrorHandler) HandleHashPasswordError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleHashPasswordError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleHashPasswordError indicates an expected call of HandleHashPasswordError.
func (mr *MockPasswordErrorHandlerMockRecorder) HandleHashPasswordError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHashPasswordError", reflect.TypeOf((*MockPasswordErrorHandler)(nil).HandleHashPasswordError), varargs...)
}

// HandlePasswordNotMatchError mocks base method.
func (m *MockPasswordErrorHandler) HandlePasswordNotMatchError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandlePasswordNotMatchError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandlePasswordNotMatchError indicates an expected call of HandlePasswordNotMatchError.
func (mr *MockPasswordErrorHandlerMockRecorder) HandlePasswordNotMatchError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePasswordNotMatchError", reflect.TypeOf((*MockPasswordErrorHandler)(nil).HandlePasswordNotMatchError), varargs...)
}

// MockPasswordResetErrorHandler is a mock of PasswordResetErrorHandler interface.
type MockPasswordResetErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetErrorHandlerMockRecorder
	isgomock struct{}
}

// MockPasswordResetErrorHandlerMockRecorder is the mock recorder for MockPasswordResetErrorHandler.
type MockPasswordResetErrorHandlerMockRecorder struct {
	mock *MockPasswordResetErrorHandler
}

// NewMockPasswordResetErrorHandler creates a new mock instance.
func NewMockPasswordResetErrorHandler(ctrl *gomock.Controller) *MockPasswordResetErrorHandler {
	mock := &MockPasswordResetErrorHandler{ctrl: ctrl}
	mock.recorder = &MockPasswordResetErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetErrorHandler) EXPECT() *MockPasswordResetErrorHandlerMockRecorder {
	return m.recorder
}

// HandleCreateResetTokenError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleCreateResetTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleCreateResetTokenError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleCreateResetTokenError indicates an expected call of HandleCreateResetTokenError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleCreateResetTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateResetTokenError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleCreateResetTokenError), varargs...)
}

// HandleDeleteTokenError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleDeleteTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleDeleteTokenError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleDeleteTokenError indicates an expected call of HandleDeleteTokenError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleDeleteTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteTokenError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleDeleteTokenError), varargs...)
}

// HandleFindEmailError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleFindEmailError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindEmailError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindEmailError indicates an expected call of HandleFindEmailError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleFindEmailError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindEmailError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleFindEmailError), varargs...)
}

// HandleFindTokenError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleFindTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindTokenError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindTokenError indicates an expected call of HandleFindTokenError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleFindTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindTokenError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleFindTokenError), varargs...)
}

// HandleUpdatePasswordError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleUpdatePasswordError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleUpdatePasswordError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleUpdatePasswordError indicates an expected call of HandleUpdatePasswordError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleUpdatePasswordError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdatePasswordError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleUpdatePasswordError), varargs...)
}

// HandleUpdateVerifiedError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleUpdateVerifiedError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleUpdateVerifiedError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleUpdateVerifiedError indicates an expected call of HandleUpdateVerifiedError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleUpdateVerifiedError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateVerifiedError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleUpdateVerifiedError), varargs...)
}

// HandleVerifyCodeError mocks base method.
func (m *MockPasswordResetErrorHandler) HandleVerifyCodeError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleVerifyCodeError", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleVerifyCodeError indicates an expected call of HandleVerifyCodeError.
func (mr *MockPasswordResetErrorHandlerMockRecorder) HandleVerifyCodeError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleVerifyCodeError", reflect.TypeOf((*MockPasswordResetErrorHandler)(nil).HandleVerifyCodeError), varargs...)
}

// MockRandomStringErrorHandler is a mock of RandomStringErrorHandler interface.
type MockRandomStringErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRandomStringErrorHandlerMockRecorder
	isgomock struct{}
}

// MockRandomStringErrorHandlerMockRecorder is the mock recorder for MockRandomStringErrorHandler.
type MockRandomStringErrorHandlerMockRecorder struct {
	mock *MockRandomStringErrorHandler
}

// NewMockRandomStringErrorHandler creates a new mock instance.
func NewMockRandomStringErrorHandler(ctrl *gomock.Controller) *MockRandomStringErrorHandler {
	mock := &MockRandomStringErrorHandler{ctrl: ctrl}
	mock.recorder = &MockRandomStringErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomStringErrorHandler) EXPECT() *MockRandomStringErrorHandlerMockRecorder {
	return m.recorder
}

// HandleRandomStringErrorForgotPassword mocks base method.
func (m *MockRandomStringErrorHandler) HandleRandomStringErrorForgotPassword(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleRandomStringErrorForgotPassword", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleRandomStringErrorForgotPassword indicates an expected call of HandleRandomStringErrorForgotPassword.
func (mr *MockRandomStringErrorHandlerMockRecorder) HandleRandomStringErrorForgotPassword(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRandomStringErrorForgotPassword", reflect.TypeOf((*MockRandomStringErrorHandler)(nil).HandleRandomStringErrorForgotPassword), varargs...)
}

// HandleRandomStringErrorRegister mocks base method.
func (m *MockRandomStringErrorHandler) HandleRandomStringErrorRegister(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleRandomStringErrorRegister", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleRandomStringErrorRegister indicates an expected call of HandleRandomStringErrorRegister.
func (mr *MockRandomStringErrorHandlerMockRecorder) HandleRandomStringErrorRegister(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRandomStringErrorRegister", reflect.TypeOf((*MockRandomStringErrorHandler)(nil).HandleRandomStringErrorRegister), varargs...)
}

// MockRegisterErrorHandler is a mock of RegisterErrorHandler interface.
type MockRegisterErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterErrorHandlerMockRecorder
	isgomock struct{}
}

// MockRegisterErrorHandlerMockRecorder is the mock recorder for MockRegisterErrorHandler.
type MockRegisterErrorHandlerMockRecorder struct {
	mock *MockRegisterErrorHandler
}

// NewMockRegisterErrorHandler creates a new mock instance.
func NewMockRegisterErrorHandler(ctrl *gomock.Controller) *MockRegisterErrorHandler {
	mock := &MockRegisterErrorHandler{ctrl: ctrl}
	mock.recorder = &MockRegisterErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterErrorHandler) EXPECT() *MockRegisterErrorHandlerMockRecorder {
	return m.recorder
}

// HandleAssignRoleError mocks base method.
func (m *MockRegisterErrorHandler) HandleAssignRoleError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleAssignRoleError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleAssignRoleError indicates an expected call of HandleAssignRoleError.
func (mr *MockRegisterErrorHandlerMockRecorder) HandleAssignRoleError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAssignRoleError", reflect.TypeOf((*MockRegisterErrorHandler)(nil).HandleAssignRoleError), varargs...)
}

// HandleCreateUserError mocks base method.
func (m *MockRegisterErrorHandler) HandleCreateUserError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleCreateUserError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleCreateUserError indicates an expected call of HandleCreateUserError.
func (mr *MockRegisterErrorHandlerMockRecorder) HandleCreateUserError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateUserError", reflect.TypeOf((*MockRegisterErrorHandler)(nil).HandleCreateUserError), varargs...)
}

// HandleFindEmailError mocks base method.
func (m *MockRegisterErrorHandler) HandleFindEmailError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindEmailError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindEmailError indicates an expected call of HandleFindEmailError.
func (mr *MockRegisterErrorHandlerMockRecorder) HandleFindEmailError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindEmailError", reflect.TypeOf((*MockRegisterErrorHandler)(nil).HandleFindEmailError), varargs...)
}

// HandleFindRoleError mocks base method.
func (m *MockRegisterErrorHandler) HandleFindRoleError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleFindRoleError", varargs...)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleFindRoleError indicates an expected call of HandleFindRoleError.
func (mr *MockRegisterErrorHandlerMockRecorder) HandleFindRoleError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFindRoleError", reflect.TypeOf((*MockRegisterErrorHandler)(nil).HandleFindRoleError), varargs...)
}

// MockTokenErrorHandler is a mock of TokenErrorHandler interface.
type MockTokenErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTokenErrorHandlerMockRecorder
	isgomock struct{}
}

// MockTokenErrorHandlerMockRecorder is the mock recorder for MockTokenErrorHandler.
type MockTokenErrorHandlerMockRecorder struct {
	mock *MockTokenErrorHandler
}

// NewMockTokenErrorHandler creates a new mock instance.
func NewMockTokenErrorHandler(ctrl *gomock.Controller) *MockTokenErrorHandler {
	mock := &MockTokenErrorHandler{ctrl: ctrl}
	mock.recorder = &MockTokenErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenErrorHandler) EXPECT() *MockTokenErrorHandlerMockRecorder {
	return m.recorder
}

// HandleCreateAccessTokenError mocks base method.
func (m *MockTokenErrorHandler) HandleCreateAccessTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleCreateAccessTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleCreateAccessTokenError indicates an expected call of HandleCreateAccessTokenError.
func (mr *MockTokenErrorHandlerMockRecorder) HandleCreateAccessTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateAccessTokenError", reflect.TypeOf((*MockTokenErrorHandler)(nil).HandleCreateAccessTokenError), varargs...)
}

// HandleCreateRefreshTokenError mocks base method.
func (m *MockTokenErrorHandler) HandleCreateRefreshTokenError(err error, method, tracePrefix string, span trace.Span, status *string, fields ...zap.Field) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	varargs := []any{err, method, tracePrefix, span, status}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleCreateRefreshTokenError", varargs...)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// HandleCreateRefreshTokenError indicates an expected call of HandleCreateRefreshTokenError.
func (mr *MockTokenErrorHandlerMockRecorder) HandleCreateRefreshTokenError(err, method, tracePrefix, span, status any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err, method, tracePrefix, span, status}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRefreshTokenError", reflect.TypeOf((*MockTokenErrorHandler)(nil).HandleCreateRefreshTokenError), varargs...)
}
