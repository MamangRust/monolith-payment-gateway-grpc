// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	record "github.com/MamangRust/monolith-payment-gateway-shared/domain/record"
	requests "github.com/MamangRust/monolith-payment-gateway-shared/domain/requests"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(request *requests.RegisterRequest) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", request)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), request)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(email string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), email)
}

// FindByEmailAndVerify mocks base method.
func (m *MockUserRepository) FindByEmailAndVerify(email string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailAndVerify", email)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailAndVerify indicates an expected call of FindByEmailAndVerify.
func (mr *MockUserRepositoryMockRecorder) FindByEmailAndVerify(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailAndVerify", reflect.TypeOf((*MockUserRepository)(nil).FindByEmailAndVerify), email)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), id)
}

// FindByVerificationCode mocks base method.
func (m *MockUserRepository) FindByVerificationCode(verification_code string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVerificationCode", verification_code)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVerificationCode indicates an expected call of FindByVerificationCode.
func (mr *MockUserRepositoryMockRecorder) FindByVerificationCode(verification_code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVerificationCode", reflect.TypeOf((*MockUserRepository)(nil).FindByVerificationCode), verification_code)
}

// UpdateUserIsVerified mocks base method.
func (m *MockUserRepository) UpdateUserIsVerified(user_id int, is_verified bool) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIsVerified", user_id, is_verified)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIsVerified indicates an expected call of UpdateUserIsVerified.
func (mr *MockUserRepositoryMockRecorder) UpdateUserIsVerified(user_id, is_verified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIsVerified", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserIsVerified), user_id, is_verified)
}

// UpdateUserPassword mocks base method.
func (m *MockUserRepository) UpdateUserPassword(user_id int, password string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", user_id, password)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserRepositoryMockRecorder) UpdateUserPassword(user_id, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPassword), user_id, password)
}

// MockResetTokenRepository is a mock of ResetTokenRepository interface.
type MockResetTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResetTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockResetTokenRepositoryMockRecorder is the mock recorder for MockResetTokenRepository.
type MockResetTokenRepositoryMockRecorder struct {
	mock *MockResetTokenRepository
}

// NewMockResetTokenRepository creates a new mock instance.
func NewMockResetTokenRepository(ctrl *gomock.Controller) *MockResetTokenRepository {
	mock := &MockResetTokenRepository{ctrl: ctrl}
	mock.recorder = &MockResetTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetTokenRepository) EXPECT() *MockResetTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateResetToken mocks base method.
func (m *MockResetTokenRepository) CreateResetToken(req *requests.CreateResetTokenRequest) (*record.ResetTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetToken", req)
	ret0, _ := ret[0].(*record.ResetTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetToken indicates an expected call of CreateResetToken.
func (mr *MockResetTokenRepositoryMockRecorder) CreateResetToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetToken", reflect.TypeOf((*MockResetTokenRepository)(nil).CreateResetToken), req)
}

// DeleteResetToken mocks base method.
func (m *MockResetTokenRepository) DeleteResetToken(user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResetToken", user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResetToken indicates an expected call of DeleteResetToken.
func (mr *MockResetTokenRepositoryMockRecorder) DeleteResetToken(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetToken", reflect.TypeOf((*MockResetTokenRepository)(nil).DeleteResetToken), user_id)
}

// FindByToken mocks base method.
func (m *MockResetTokenRepository) FindByToken(token string) (*record.ResetTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token)
	ret0, _ := ret[0].(*record.ResetTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockResetTokenRepositoryMockRecorder) FindByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockResetTokenRepository)(nil).FindByToken), token)
}

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) CreateRefreshToken(req *requests.CreateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) CreateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).CreateRefreshToken), req)
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshToken), token)
}

// DeleteRefreshTokenByUserId mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshTokenByUserId(user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenByUserId", user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenByUserId indicates an expected call of DeleteRefreshTokenByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshTokenByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshTokenByUserId), user_id)
}

// FindByToken mocks base method.
func (m *MockRefreshTokenRepository) FindByToken(token string) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByToken), token)
}

// FindByUserId mocks base method.
func (m *MockRefreshTokenRepository) FindByUserId(user_id int) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", user_id)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByUserId), user_id)
}

// UpdateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) UpdateRefreshToken(req *requests.UpdateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) UpdateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).UpdateRefreshToken), req)
}

// MockUserRoleRepository is a mock of UserRoleRepository interface.
type MockUserRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRoleRepositoryMockRecorder is the mock recorder for MockUserRoleRepository.
type MockUserRoleRepositoryMockRecorder struct {
	mock *MockUserRoleRepository
}

// NewMockUserRoleRepository creates a new mock instance.
func NewMockUserRoleRepository(ctrl *gomock.Controller) *MockUserRoleRepository {
	mock := &MockUserRoleRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRepository) EXPECT() *MockUserRoleRepositoryMockRecorder {
	return m.recorder
}

// AssignRoleToUser mocks base method.
func (m *MockUserRoleRepository) AssignRoleToUser(req *requests.CreateUserRoleRequest) (*record.UserRoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", req)
	ret0, _ := ret[0].(*record.UserRoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockUserRoleRepositoryMockRecorder) AssignRoleToUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockUserRoleRepository)(nil).AssignRoleToUser), req)
}

// RemoveRoleFromUser mocks base method.
func (m *MockUserRoleRepository) RemoveRoleFromUser(req *requests.RemoveUserRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleFromUser indicates an expected call of RemoveRoleFromUser.
func (mr *MockUserRoleRepositoryMockRecorder) RemoveRoleFromUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromUser", reflect.TypeOf((*MockUserRoleRepository)(nil).RemoveRoleFromUser), req)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockRoleRepository) FindById(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRoleRepositoryMockRecorder) FindById(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRoleRepository)(nil).FindById), role_id)
}

// FindByName mocks base method.
func (m *MockRoleRepository) FindByName(name string) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockRoleRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockRoleRepository)(nil).FindByName), name)
}
