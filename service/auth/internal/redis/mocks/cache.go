// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/cache.go
//

// Package mock_mencache is a generated GoMock package.
package mock_mencache

import (
	reflect "reflect"
	time "time"

	response "github.com/MamangRust/monolith-payment-gateway-shared/domain/response"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityCache is a mock of IdentityCache interface.
type MockIdentityCache struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityCacheMockRecorder
	isgomock struct{}
}

// MockIdentityCacheMockRecorder is the mock recorder for MockIdentityCache.
type MockIdentityCacheMockRecorder struct {
	mock *MockIdentityCache
}

// NewMockIdentityCache creates a new mock instance.
func NewMockIdentityCache(ctrl *gomock.Controller) *MockIdentityCache {
	mock := &MockIdentityCache{ctrl: ctrl}
	mock.recorder = &MockIdentityCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityCache) EXPECT() *MockIdentityCacheMockRecorder {
	return m.recorder
}

// DeleteCachedUserInfo mocks base method.
func (m *MockIdentityCache) DeleteCachedUserInfo(userId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCachedUserInfo", userId)
}

// DeleteCachedUserInfo indicates an expected call of DeleteCachedUserInfo.
func (mr *MockIdentityCacheMockRecorder) DeleteCachedUserInfo(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachedUserInfo", reflect.TypeOf((*MockIdentityCache)(nil).DeleteCachedUserInfo), userId)
}

// DeleteRefreshToken mocks base method.
func (m *MockIdentityCache) DeleteRefreshToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRefreshToken", token)
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockIdentityCacheMockRecorder) DeleteRefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockIdentityCache)(nil).DeleteRefreshToken), token)
}

// GetCachedUserInfo mocks base method.
func (m *MockIdentityCache) GetCachedUserInfo(userId string) (*response.UserResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedUserInfo", userId)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCachedUserInfo indicates an expected call of GetCachedUserInfo.
func (mr *MockIdentityCacheMockRecorder) GetCachedUserInfo(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedUserInfo", reflect.TypeOf((*MockIdentityCache)(nil).GetCachedUserInfo), userId)
}

// GetRefreshToken mocks base method.
func (m *MockIdentityCache) GetRefreshToken(token string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockIdentityCacheMockRecorder) GetRefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockIdentityCache)(nil).GetRefreshToken), token)
}

// SetCachedUserInfo mocks base method.
func (m *MockIdentityCache) SetCachedUserInfo(user *response.UserResponse, expiration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCachedUserInfo", user, expiration)
}

// SetCachedUserInfo indicates an expected call of SetCachedUserInfo.
func (mr *MockIdentityCacheMockRecorder) SetCachedUserInfo(user, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCachedUserInfo", reflect.TypeOf((*MockIdentityCache)(nil).SetCachedUserInfo), user, expiration)
}

// SetRefreshToken mocks base method.
func (m *MockIdentityCache) SetRefreshToken(token string, expiration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshToken", token, expiration)
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockIdentityCacheMockRecorder) SetRefreshToken(token, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockIdentityCache)(nil).SetRefreshToken), token, expiration)
}

// MockLoginCache is a mock of LoginCache interface.
type MockLoginCache struct {
	ctrl     *gomock.Controller
	recorder *MockLoginCacheMockRecorder
	isgomock struct{}
}

// MockLoginCacheMockRecorder is the mock recorder for MockLoginCache.
type MockLoginCacheMockRecorder struct {
	mock *MockLoginCache
}

// NewMockLoginCache creates a new mock instance.
func NewMockLoginCache(ctrl *gomock.Controller) *MockLoginCache {
	mock := &MockLoginCache{ctrl: ctrl}
	mock.recorder = &MockLoginCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginCache) EXPECT() *MockLoginCacheMockRecorder {
	return m.recorder
}

// GetCachedLogin mocks base method.
func (m *MockLoginCache) GetCachedLogin(email string) (*response.TokenResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedLogin", email)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCachedLogin indicates an expected call of GetCachedLogin.
func (mr *MockLoginCacheMockRecorder) GetCachedLogin(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedLogin", reflect.TypeOf((*MockLoginCache)(nil).GetCachedLogin), email)
}

// SetCachedLogin mocks base method.
func (m *MockLoginCache) SetCachedLogin(email string, data *response.TokenResponse, expiration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCachedLogin", email, data, expiration)
}

// SetCachedLogin indicates an expected call of SetCachedLogin.
func (mr *MockLoginCacheMockRecorder) SetCachedLogin(email, data, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCachedLogin", reflect.TypeOf((*MockLoginCache)(nil).SetCachedLogin), email, data, expiration)
}

// MockPasswordResetCache is a mock of PasswordResetCache interface.
type MockPasswordResetCache struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetCacheMockRecorder
	isgomock struct{}
}

// MockPasswordResetCacheMockRecorder is the mock recorder for MockPasswordResetCache.
type MockPasswordResetCacheMockRecorder struct {
	mock *MockPasswordResetCache
}

// NewMockPasswordResetCache creates a new mock instance.
func NewMockPasswordResetCache(ctrl *gomock.Controller) *MockPasswordResetCache {
	mock := &MockPasswordResetCache{ctrl: ctrl}
	mock.recorder = &MockPasswordResetCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetCache) EXPECT() *MockPasswordResetCacheMockRecorder {
	return m.recorder
}

// DeleteResetTokenCache mocks base method.
func (m *MockPasswordResetCache) DeleteResetTokenCache(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteResetTokenCache", token)
}

// DeleteResetTokenCache indicates an expected call of DeleteResetTokenCache.
func (mr *MockPasswordResetCacheMockRecorder) DeleteResetTokenCache(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetTokenCache", reflect.TypeOf((*MockPasswordResetCache)(nil).DeleteResetTokenCache), token)
}

// DeleteVerificationCodeCache mocks base method.
func (m *MockPasswordResetCache) DeleteVerificationCodeCache(email string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteVerificationCodeCache", email)
}

// DeleteVerificationCodeCache indicates an expected call of DeleteVerificationCodeCache.
func (mr *MockPasswordResetCacheMockRecorder) DeleteVerificationCodeCache(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerificationCodeCache", reflect.TypeOf((*MockPasswordResetCache)(nil).DeleteVerificationCodeCache), email)
}

// GetResetTokenCache mocks base method.
func (m *MockPasswordResetCache) GetResetTokenCache(token string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetTokenCache", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetResetTokenCache indicates an expected call of GetResetTokenCache.
func (mr *MockPasswordResetCacheMockRecorder) GetResetTokenCache(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetTokenCache", reflect.TypeOf((*MockPasswordResetCache)(nil).GetResetTokenCache), token)
}

// SetResetTokenCache mocks base method.
func (m *MockPasswordResetCache) SetResetTokenCache(token string, userID int, expiration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResetTokenCache", token, userID, expiration)
}

// SetResetTokenCache indicates an expected call of SetResetTokenCache.
func (mr *MockPasswordResetCacheMockRecorder) SetResetTokenCache(token, userID, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResetTokenCache", reflect.TypeOf((*MockPasswordResetCache)(nil).SetResetTokenCache), token, userID, expiration)
}

// MockRegisterCache is a mock of RegisterCache interface.
type MockRegisterCache struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterCacheMockRecorder
	isgomock struct{}
}

// MockRegisterCacheMockRecorder is the mock recorder for MockRegisterCache.
type MockRegisterCacheMockRecorder struct {
	mock *MockRegisterCache
}

// NewMockRegisterCache creates a new mock instance.
func NewMockRegisterCache(ctrl *gomock.Controller) *MockRegisterCache {
	mock := &MockRegisterCache{ctrl: ctrl}
	mock.recorder = &MockRegisterCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterCache) EXPECT() *MockRegisterCacheMockRecorder {
	return m.recorder
}

// SetVerificationCodeCache mocks base method.
func (m *MockRegisterCache) SetVerificationCodeCache(email, code string, expiration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVerificationCodeCache", email, code, expiration)
}

// SetVerificationCodeCache indicates an expected call of SetVerificationCodeCache.
func (mr *MockRegisterCacheMockRecorder) SetVerificationCodeCache(email, code, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerificationCodeCache", reflect.TypeOf((*MockRegisterCache)(nil).SetVerificationCodeCache), email, code, expiration)
}
