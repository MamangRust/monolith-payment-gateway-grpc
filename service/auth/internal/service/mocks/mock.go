// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	requests "github.com/MamangRust/monolith-payment-gateway-shared/domain/requests"
	response "github.com/MamangRust/monolith-payment-gateway-shared/domain/response"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistrationService is a mock of RegistrationService interface.
type MockRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationServiceMockRecorder
	isgomock struct{}
}

// MockRegistrationServiceMockRecorder is the mock recorder for MockRegistrationService.
type MockRegistrationServiceMockRecorder struct {
	mock *MockRegistrationService
}

// NewMockRegistrationService creates a new mock instance.
func NewMockRegistrationService(ctrl *gomock.Controller) *MockRegistrationService {
	mock := &MockRegistrationService{ctrl: ctrl}
	mock.recorder = &MockRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationService) EXPECT() *MockRegistrationServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrationService) Register(request *requests.RegisterRequest) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", request)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegistrationServiceMockRecorder) Register(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationService)(nil).Register), request)
}

// MockLoginService is a mock of LoginService interface.
type MockLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServiceMockRecorder
	isgomock struct{}
}

// MockLoginServiceMockRecorder is the mock recorder for MockLoginService.
type MockLoginServiceMockRecorder struct {
	mock *MockLoginService
}

// NewMockLoginService creates a new mock instance.
func NewMockLoginService(ctrl *gomock.Controller) *MockLoginService {
	mock := &MockLoginService{ctrl: ctrl}
	mock.recorder = &MockLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginService) EXPECT() *MockLoginServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginService) Login(request *requests.AuthRequest) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", request)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginServiceMockRecorder) Login(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginService)(nil).Login), request)
}

// MockPasswordResetService is a mock of PasswordResetService interface.
type MockPasswordResetService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetServiceMockRecorder
	isgomock struct{}
}

// MockPasswordResetServiceMockRecorder is the mock recorder for MockPasswordResetService.
type MockPasswordResetServiceMockRecorder struct {
	mock *MockPasswordResetService
}

// NewMockPasswordResetService creates a new mock instance.
func NewMockPasswordResetService(ctrl *gomock.Controller) *MockPasswordResetService {
	mock := &MockPasswordResetService{ctrl: ctrl}
	mock.recorder = &MockPasswordResetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetService) EXPECT() *MockPasswordResetServiceMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockPasswordResetService) ForgotPassword(email string) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockPasswordResetServiceMockRecorder) ForgotPassword(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockPasswordResetService)(nil).ForgotPassword), email)
}

// ResetPassword mocks base method.
func (m *MockPasswordResetService) ResetPassword(request *requests.CreateResetPasswordRequest) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockPasswordResetServiceMockRecorder) ResetPassword(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockPasswordResetService)(nil).ResetPassword), request)
}

// VerifyCode mocks base method.
func (m *MockPasswordResetService) VerifyCode(code string) (bool, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockPasswordResetServiceMockRecorder) VerifyCode(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockPasswordResetService)(nil).VerifyCode), code)
}

// MockIdentifyService is a mock of IdentifyService interface.
type MockIdentifyService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifyServiceMockRecorder
	isgomock struct{}
}

// MockIdentifyServiceMockRecorder is the mock recorder for MockIdentifyService.
type MockIdentifyServiceMockRecorder struct {
	mock *MockIdentifyService
}

// NewMockIdentifyService creates a new mock instance.
func NewMockIdentifyService(ctrl *gomock.Controller) *MockIdentifyService {
	mock := &MockIdentifyService{ctrl: ctrl}
	mock.recorder = &MockIdentifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifyService) EXPECT() *MockIdentifyServiceMockRecorder {
	return m.recorder
}

// GetMe mocks base method.
func (m *MockIdentifyService) GetMe(token string) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", token)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockIdentifyServiceMockRecorder) GetMe(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockIdentifyService)(nil).GetMe), token)
}

// RefreshToken mocks base method.
func (m *MockIdentifyService) RefreshToken(token string) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", token)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIdentifyServiceMockRecorder) RefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIdentifyService)(nil).RefreshToken), token)
}
