// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_auth_handle.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/MamangRust/monolith-payment-gateway-shared/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthHandleGrpc is a mock of AuthHandleGrpc interface.
type MockAuthHandleGrpc struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandleGrpcMockRecorder
	isgomock struct{}
}

// MockAuthHandleGrpcMockRecorder is the mock recorder for MockAuthHandleGrpc.
type MockAuthHandleGrpcMockRecorder struct {
	mock *MockAuthHandleGrpc
}

// NewMockAuthHandleGrpc creates a new mock instance.
func NewMockAuthHandleGrpc(ctrl *gomock.Controller) *MockAuthHandleGrpc {
	mock := &MockAuthHandleGrpc{ctrl: ctrl}
	mock.recorder = &MockAuthHandleGrpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandleGrpc) EXPECT() *MockAuthHandleGrpcMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockAuthHandleGrpc) ForgotPassword(arg0 context.Context, arg1 *pb.ForgotPasswordRequest) (*pb.ApiResponseForgotPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseForgotPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockAuthHandleGrpcMockRecorder) ForgotPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockAuthHandleGrpc)(nil).ForgotPassword), arg0, arg1)
}

// GetMe mocks base method.
func (m *MockAuthHandleGrpc) GetMe(arg0 context.Context, arg1 *pb.GetMeRequest) (*pb.ApiResponseGetMe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseGetMe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockAuthHandleGrpcMockRecorder) GetMe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockAuthHandleGrpc)(nil).GetMe), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockAuthHandleGrpc) LoginUser(arg0 context.Context, arg1 *pb.LoginRequest) (*pb.ApiResponseLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthHandleGrpcMockRecorder) LoginUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthHandleGrpc)(nil).LoginUser), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockAuthHandleGrpc) RefreshToken(arg0 context.Context, arg1 *pb.RefreshTokenRequest) (*pb.ApiResponseRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthHandleGrpcMockRecorder) RefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthHandleGrpc)(nil).RefreshToken), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockAuthHandleGrpc) RegisterUser(arg0 context.Context, arg1 *pb.RegisterRequest) (*pb.ApiResponseRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthHandleGrpcMockRecorder) RegisterUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthHandleGrpc)(nil).RegisterUser), arg0, arg1)
}

// ResetPassword mocks base method.
func (m *MockAuthHandleGrpc) ResetPassword(arg0 context.Context, arg1 *pb.ResetPasswordRequest) (*pb.ApiResponseResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockAuthHandleGrpcMockRecorder) ResetPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthHandleGrpc)(nil).ResetPassword), arg0, arg1)
}

// VerifyCode mocks base method.
func (m *MockAuthHandleGrpc) VerifyCode(arg0 context.Context, arg1 *pb.VerifyCodeRequest) (*pb.ApiResponseVerifyCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseVerifyCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockAuthHandleGrpcMockRecorder) VerifyCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockAuthHandleGrpc)(nil).VerifyCode), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthHandleGrpc) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthHandleGrpcMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthHandleGrpc)(nil).mustEmbedUnimplementedAuthServiceServer))
}
