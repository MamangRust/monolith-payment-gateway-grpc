services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: DRAGON
      POSTGRES_PASSWORD: DRAGON
      POSTGRES_DB: PAYMENT_GATEWAY
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U DRAGON -d PAYMENT_GATEWAY"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: .
      dockerfile: ./service/migrate/Dockerfile
    volumes:
      - ./docker.env:/app/docker.env
      - ./pkg/database/migrations:/app/pkg/database/migrations
    container_name: migrate
    env_file: ./docker.env
    environment:
      DB_URL: postgres://DRAGON:DRAGON@postgres/PAYMENT_GATEWAY
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy

  apigateway:
    build:
      context: .
      dockerfile: ./service/apigateway/Dockerfile
    container_name: apigateway
    env_file: ./docker.env
    ports:
      - "5000:5000"
    networks:
      - app_network
    depends_on:
      - postgres
      - auth
      - card
      - merchant
      - user
      - role
      - saldo
      - topup
      - transaction
      - transfer
      - withdraw

  auth:
    build:
      context: .
      dockerfile: ./service/auth/Dockerfile
    container_name: auth
    env_file: ./docker.env
    ports:
      - "50051:50051"
      - "8081:8081"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  merchant:
    build:
      context: .
      dockerfile: ./service/merchant/Dockerfile
    container_name: merchant
    env_file: ./docker.env
    ports:
      - "50054:50054"
      - "8084:8084"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  card:
    build:
      context: .
      dockerfile: ./service/card/Dockerfile
    container_name: card
    env_file: ./docker.env
    ports:
      - "50053:50053"
      - "8083:8083"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  saldo:
    build:
      context: .
      dockerfile: ./service/saldo/Dockerfile
    container_name: saldo
    env_file: ./docker.env
    ports:
      - "50056:50056"
      - "8086:8086"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  role:
    build:
      context: .
      dockerfile: ./service/role/Dockerfile
    container_name: role
    env_file: ./docker.env
    ports:
      - "50052:50052"
      - "8082:8082"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  topup:
    build:
      context: .
      dockerfile: ./service/topup/Dockerfile
    container_name: topup
    env_file: ./docker.env
    ports:
      - "50057:50057"
      - "8087:8087"
    networks:
      - app_network
    depends_on:
      - postgres
      - migrate

  transaction:
    build:
      context: .
      dockerfile: ./service/transaction/Dockerfile
    container_name: transaction
    env_file: ./docker.env
    ports:
      - "50058:50058"
      - "8088:8088"
    networks:
      - app_network
    depends_on:
      - postgres

  transfer:
    build:
      context: .
      dockerfile: ./service/transfer/Dockerfile
    container_name: transfer
    env_file: ./docker.env
    ports:
      - "50059:50059"
      - "8089:8089"
    networks:
      - app_network
    depends_on:
      - postgres

  user:
    build:
      context: .
      dockerfile: ./service/user/Dockerfile
    container_name: user
    env_file: ./docker.env
    ports:
      - "50055:50055"
      - "8085:8085"
    networks:
      - app_network
    depends_on:
      - postgres

  email:
    build:
      context: .
      dockerfile: ./service/email/Dockerfile
    container_name: email
    env_file: ./docker.env
    ports:
      - "8080:8080"
    networks:
      - app_network
    depends_on:
      - postgres

  withdraw:
    build:
      context: .
      dockerfile: ./service/withdraw/Dockerfile
    container_name: withdraw
    env_file: ./docker.env
    ports:
      - "50060:50060"
      - "8090:8090"
    networks:
      - app_network
    depends_on:
      - postgres

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      
      - KAFKA_MAX_REQUEST_SIZE=104857600  
      - KAFKA_MESSAGE_MAX_BYTES=104857600  
      - KAFKA_MAX_PARTITION_FETCH_BYTES=104857600 
      - KAFKA_NUM_NETWORK_THREADS=3
      - KAFKA_NUM_IO_THREADS=8
      - KAFKA_SOCKET_SEND_BUFFER_BYTES=102400
      - KAFKA_SOCKET_RECEIVE_BUFFER_BYTES=102400
      - KAFKA_SOCKET_REQUEST_MAX_BYTES=104857600

    depends_on:
      - zookeeper
    command: >
      bash -c "curl -o /tmp/wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh &&
      chmod +x /tmp/wait-for-it.sh &&
      /tmp/wait-for-it.sh zookeeper:2181 -- /opt/bitnami/scripts/kafka/run.sh"


  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    depends_on:
      - otel-collector
    restart: unless-stopped


  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - jaeger

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"     
      - "4318:4318"      
      - "13133:13133"
      - "8889:8889"
    restart: unless-stopped


  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    ports:
      - "6831:6831/udp"
      - "16686:16686"

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge